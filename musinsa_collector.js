const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

class MusinsaEmailCollector {
    constructor() {
        this.browser = null;
        this.page = null;
        this.results = [];
        this.failedBrands = [];
        this.delayTime = 3000; // Í∏∞Î≥∏ ÏßÄÏó∞ÏãúÍ∞Ñ 3Ï¥à
    }

    // ÏßÄÏó∞ Ìï®Ïàò (waitForTimeout ÎåÄÏ≤¥)
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async init() {
        console.log('Î∏åÎùºÏö∞Ï†Ä Ï¥àÍ∏∞Ìôî Ï§ë...');
        this.browser = await puppeteer.launch({
            headless: false, // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌï¥ Î∏åÎùºÏö∞Ï†Ä Ï∞Ω ÌëúÏãú
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=VizDisplayCompositor',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor'
            ]
        });
        
        this.page = await this.browser.newPage();
        
        // User Agent ÏÑ§Ï†ï (Î¥á Í∞êÏßÄ Î∞©ÏßÄ)
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        // Ï∂îÍ∞Ä Ìó§Îçî ÏÑ§Ï†ï
        await this.page.setExtraHTTPHeaders({
            'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8'
        });
        
        console.log('Î∏åÎùºÏö∞Ï†Ä Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    // Î∏åÎûúÎìúÎ™ÖÏùÑ URL Ïù∏ÏΩîÎî©
    encodeKoreanBrand(brandName) {
        return encodeURIComponent(brandName);
    }

    // Î¨¥Ïã†ÏÇ¨ÏóêÏÑú Î∏åÎûúÎìú Í≤ÄÏÉâÌïòÍ≥† Ï≤´ Î≤àÏß∏ ÏÉÅÌíà URL Î∞òÌôò
    async searchBrand(brandName) {
        try {
            const encodedBrand = this.encodeKoreanBrand(brandName);
            const searchUrl = `https://www.musinsa.com/search/goods?keyword=${encodedBrand}&gf=A`;
            
            console.log(`  üîç Î∏åÎûúÎìú Í≤ÄÏÉâ: ${brandName}`);
            await this.page.goto(searchUrl, { waitUntil: 'networkidle2' });
            
            // Í≤ÄÏÉâ Í≤∞Í≥º Î°úÎî© ÎåÄÍ∏∞
            await this.sleep(3000);
            
            // Ï≤´ Î≤àÏß∏ ÏÉÅÌíà ÎßÅÌÅ¨ Ï∞æÍ∏∞
            const firstProductLink = await this.page.evaluate(() => {
                const productLink = document.querySelector('a[href*="/products/"]');
                return productLink ? productLink.href : null;
            });
            
            if (!firstProductLink) {
                // Îã§Î•∏ ÏÉÅÌíà ÎßÅÌÅ¨ Ìå®ÌÑ¥ÎèÑ ÏãúÎèÑ
                const alternativeLink = await this.page.evaluate(() => {
                    const links = [
                        'a[href*="/product/"]',
                        'a[href*="/goods/"]',
                        '.product-link',
                        '.goods-link'
                    ];
                    
                    for (const selector of links) {
                        const element = document.querySelector(selector);
                        if (element) return element.href;
                    }
                    return null;
                });
                
                if (alternativeLink) {
                    console.log(`  ‚úÖ ÎåÄÏïà ÏÉÅÌíà Î∞úÍ≤¨: ${alternativeLink}`);
                    return alternativeLink;
                }
                
                throw new Error('Í≤ÄÏÉâ Í≤∞Í≥ºÏóêÏÑú ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
            }
            
            console.log(`  ‚úÖ ÏÉÅÌíà Î∞úÍ≤¨: ${firstProductLink}`);
            return firstProductLink;
            
        } catch (error) {
            console.log(`  ‚ùå Í≤ÄÏÉâ Ïã§Ìå®: ${error.message}`);
            return null;
        }
    }

    // ÏÉÅÌíà ÌéòÏù¥ÏßÄÏóêÏÑú ÌåêÎß§Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú
    async extractSellerInfo(productUrl) {
        try {
            console.log(`  üìÑ ÏÉÅÌíà ÌéòÏù¥ÏßÄ Ï†ëÏÜç`);
            await this.page.goto(productUrl, { waitUntil: 'networkidle2' });
            
            // ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞
            await this.sleep(5000);
            
            // Ïä§ÌÅ¨Î°§ Îã§Ïö¥ (lazy loading ÎåÄÎπÑ)
            await this.page.evaluate(() => {
                window.scrollTo(0, document.body.scrollHeight / 2);
            });
            await this.sleep(2000);
            
            // ÌåêÎß§Ïûê Ï†ïÎ≥¥ Î≤ÑÌäº Ï∞æÍ∏∞ Î∞è ÌÅ¥Î¶≠
            console.log(`  üîò ÌåêÎß§Ïûê Ï†ïÎ≥¥ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ`);
            
            const buttonClicked = await this.page.evaluate(() => {
                // Ïó¨Îü¨ Í∞ÄÏßÄ Î∞©Î≤ïÏúºÎ°ú ÌåêÎß§Ïûê Ï†ïÎ≥¥ Î≤ÑÌäº Ï∞æÍ∏∞
                const buttons = document.querySelectorAll('button, div[role="button"], span[role="button"]');
                for (const button of buttons) {
                    const buttonText = button.textContent || button.innerText || '';
                    if (buttonText.includes('ÌåêÎß§Ïûê Ï†ïÎ≥¥') || 
                        buttonText.includes('ÌåêÎß§ÏûêÏ†ïÎ≥¥') ||
                        buttonText.includes('seller info') ||
                        buttonText.includes('ÌåêÎß§Ï†ïÎ≥¥')) {
                        try {
                            button.click();
                            return true;
                        } catch (e) {
                            console.log('Î≤ÑÌäº ÌÅ¥Î¶≠ Ïã§Ìå®:', e.message);
                        }
                    }
                }
                
                // ÎåÄÏïàÏ†ÅÏù∏ ÏÖÄÎ†âÌÑ∞Îì§ ÏãúÎèÑ
                const alternativeSelectors = [
                    '[data-mds="AccordionTrigger"]',
                    'button[aria-controls*="radix"]',
                    'button[class*="AccordionTrigger"]',
                    'button[class*="accordion"]',
                    '.seller-info-btn',
                    '.seller-btn',
                    '.accordion-trigger'
                ];
                
                for (const selector of alternativeSelectors) {
                    try {
                        const elements = document.querySelectorAll(selector);
                        for (const element of elements) {
                            const text = element.textContent || element.innerText || '';
                            if (text.includes('ÌåêÎß§Ïûê') || text.includes('seller')) {
                                element.click();
                                return true;
                            }
                        }
                    } catch (e) {
                        continue;
                    }
                }
                
                return false;
            });
            
            if (!buttonClicked) {
                throw new Error('ÌåêÎß§Ïûê Ï†ïÎ≥¥ Î≤ÑÌäºÏùÑ Ï∞æÍ±∞ÎÇò ÌÅ¥Î¶≠Ìï† Ïàò ÏóÜÏäµÎãàÎã§');
            }
            
            // ÌåêÎß§Ïûê Ï†ïÎ≥¥ Ìå®ÎÑê Î°úÎî© ÎåÄÍ∏∞
            await this.sleep(5000);
            
            // Ïù¥Î©îÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú
            console.log(`  üìß Ïù¥Î©îÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú Ï§ë`);
            const sellerInfo = await this.page.evaluate(() => {
                const findInfoByLabel = (label) => {
                    // dt ÌÉúÍ∑∏ÏóêÏÑú ÎùºÎ≤® Ï∞æÍ∏∞
                    const dts = document.querySelectorAll('dt');
                    for (const dt of dts) {
                        const dtText = dt.textContent || dt.innerText || '';
                        if (dtText.trim().includes(label)) {
                            const dd = dt.nextElementSibling;
                            if (dd && dd.tagName === 'DD') {
                                return (dd.textContent || dd.innerText || '').trim();
                            }
                        }
                    }
                    
                    // span, div Îì±ÏóêÏÑúÎèÑ Ï∞æÍ∏∞
                    const allElements = document.querySelectorAll('*');
                    for (const elem of allElements) {
                        const text = elem.textContent || elem.innerText || '';
                        if (text.includes(label + ':') || text.includes(label + ' :')) {
                            const parent = elem.parentElement;
                            if (parent) {
                                const siblings = parent.children;
                                for (let i = 0; i < siblings.length; i++) {
                                    if (siblings[i] === elem && i + 1 < siblings.length) {
                                        return siblings[i + 1].textContent?.trim();
                                    }
                                }
                            }
                        }
                    }
                    
                    return null;
                };
                
                // Ïù¥Î©îÏùº Ìå®ÌÑ¥ÏúºÎ°ú ÏßÅÏ†ë Ï∞æÍ∏∞
                const findEmailInText = () => {
                    const allText = document.body.textContent || document.body.innerText || '';
                    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
                    const emails = allText.match(emailRegex);
                    if (emails && emails.length > 0) {
                        // ÏùºÎ∞òÏ†ÅÏù¥ÏßÄ ÏïäÏùÄ Ïù¥Î©îÏùº ÎèÑÎ©îÏù∏ ÌïÑÌÑ∞ÎßÅ
                        const validEmails = emails.filter(email => 
                            !email.includes('noreply') && 
                            !email.includes('example') &&
                            !email.includes('test') &&
                            !email.includes('facebook') &&
                            !email.includes('instagram')
                        );
                        return validEmails[0] || emails[0];
                    }
                    return null;
                };
                
                return {
                    email: findInfoByLabel('E-mail') || findInfoByLabel('Ïù¥Î©îÏùº') || findEmailInText(),
                    brand: findInfoByLabel('Î∏åÎûúÎìú'),
                    company: findInfoByLabel('ÏÉÅÌò∏') || findInfoByLabel('ÎåÄÌëúÏûê'),
                    phone: findInfoByLabel('Ïó∞ÎùΩÏ≤ò'),
                    businessNumber: findInfoByLabel('ÏÇ¨ÏóÖÏûêÎ≤àÌò∏'),
                    address: findInfoByLabel('ÏòÅÏóÖÏÜåÏû¨ÏßÄ') || findInfoByLabel('Ï£ºÏÜå')
                };
            });
            
            console.log(`  üìã Ï∂îÏ∂ú ÏôÑÎ£å:`, sellerInfo);
            return sellerInfo;
            
        } catch (error) {
            console.log(`  ‚ùå Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®: ${error.message}`);
            return null;
        }
    }

    // Îã®Ïùº Î∏åÎûúÎìú Ï≤òÎ¶¨
    async processBrand(brand, index, total) {
        const startTime = Date.now();
        
        try {
            console.log(`\n[${index + 1}/${total}] === ${brand.brandName} (${brand.brandNameEnglish || 'N/A'}) ===`);
            
            // ÌïúÍ∏Ä Î∏åÎûúÎìúÎ™ÖÏúºÎ°ú Î®ºÏ†Ä Í≤ÄÏÉâ
            let productUrl = await this.searchBrand(brand.brandName);
            
            // Ïã§Ìå®Ïãú ÏòÅÏñ¥ Î∏åÎûúÎìúÎ™ÖÏúºÎ°ú Ïû¨ÏãúÎèÑ
            if (!productUrl && brand.brandNameEnglish) {
                console.log(`  üîÑ ÏòÅÏñ¥Î™ÖÏúºÎ°ú Ïû¨ÏãúÎèÑ: ${brand.brandNameEnglish}`);
                productUrl = await this.searchBrand(brand.brandNameEnglish);
            }
            
            if (!productUrl) {
                throw new Error('ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
            }
            
            // ÌåêÎß§Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú
            const sellerInfo = await this.extractSellerInfo(productUrl);
            
            if (!sellerInfo || !sellerInfo.email) {
                throw new Error('Ïù¥Î©îÏùº Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
            }
            
            // ÏÑ±Í≥µ Í≤∞Í≥º Ï†ÄÏû•
            const result = {
                ...brand,
                musinsaEmail: sellerInfo.email,
                musinsaSellerInfo: sellerInfo,
                musinsaProductUrl: productUrl,
                status: 'success',
                collectedAt: new Date().toISOString(),
                processingTime: `${Date.now() - startTime}ms`
            };
            
            this.results.push(result);
            console.log(`  ‚úÖ ÏÑ±Í≥µ: ${sellerInfo.email} (${Date.now() - startTime}ms)`);
            
            return result;
            
        } catch (error) {
            console.log(`  ‚ùå Ïã§Ìå®: ${error.message} (${Date.now() - startTime}ms)`);
            
            const failedResult = {
                ...brand,
                status: 'failed',
                error: error.message,
                collectedAt: new Date().toISOString(),
                processingTime: `${Date.now() - startTime}ms`
            };
            
            this.failedBrands.push(failedResult);
            return null;
        }
    }

    // Ïó¨Îü¨ Î∏åÎûúÎìú ÏùºÍ¥Ñ Ï≤òÎ¶¨
    async processBrands(brands, options = {}) {
        const { delay = this.delayTime, batchSize = 10, maxRetries = 2 } = options;
        
        console.log(`\nüöÄ Ï¥ù ${brands.length}Í∞ú Î∏åÎûúÎìú Ï≤òÎ¶¨ ÏãúÏûë`);
        console.log(`‚öôÔ∏è ÏÑ§Ï†ï: ÏßÄÏó∞ÏãúÍ∞Ñ ${delay}ms, Î∞∞ÏπòÌÅ¨Í∏∞ ${batchSize}`);
        
        for (let i = 0; i < brands.length; i++) {
            const brand = brands[i];
            
            await this.processBrand(brand, i, brands.length);
            
            // ÎßàÏßÄÎßâ Î∏åÎûúÎìúÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ ÏßÄÏó∞
            if (i < brands.length - 1) {
                console.log(`  ‚è≥ ${delay}ms ÎåÄÍ∏∞...`);
                await this.sleep(delay);
            }
            
            // Î∞∞ÏπòÎßàÎã§ Ï§ëÍ∞Ñ Ï†ÄÏû• Î∞è Ìú¥Ïãù
            if ((i + 1) % batchSize === 0 && i < brands.length - 1) {
                console.log(`\nüíæ Ï§ëÍ∞Ñ Ï†ÄÏû• Î∞è 60Ï¥à Ìú¥Ïãù (${i + 1}/${brands.length} ÏôÑÎ£å)`);
                await this.saveIntermediateResults();
                await this.sleep(60000); // 1Î∂Ñ Ìú¥Ïãù
            }
        }
        
        console.log('\nüéâ === Ï≤òÎ¶¨ ÏôÑÎ£å ===');
        console.log(`‚úÖ ÏÑ±Í≥µ: ${this.results.length}Í∞ú`);
        console.log(`‚ùå Ïã§Ìå®: ${this.failedBrands.length}Í∞ú`);
        console.log(`üìä ÏÑ±Í≥µÎ•†: ${((this.results.length / brands.length) * 100).toFixed(1)}%`);
    }

    // Ï§ëÍ∞Ñ Í≤∞Í≥º Ï†ÄÏû•
    async saveIntermediateResults() {
        const timestamp = Date.now();
        const tempFile = `musinsa_temp_${timestamp}.json`;
        
        const tempData = {
            timestamp: new Date().toISOString(),
            processedCount: this.results.length + this.failedBrands.length,
            successCount: this.results.length,
            failedCount: this.failedBrands.length,
            results: this.results,
            failed: this.failedBrands
        };
        
        await fs.writeFile(tempFile, JSON.stringify(tempData, null, 2), 'utf8');
        console.log(`  üíæ Ï§ëÍ∞Ñ Í≤∞Í≥º Ï†ÄÏû•: ${tempFile}`);
    }

    // ÏµúÏ¢Ö Í≤∞Í≥º Ï†ÄÏû•
    async saveResults() {
        const timestamp = Date.now();
        
        try {
            // ÏÑ±Í≥µ Í≤∞Í≥º Ï†ÄÏû•
            if (this.results.length > 0) {
                const successFile = `musinsa_email_success_${timestamp}.json`;
                await fs.writeFile(successFile, JSON.stringify(this.results, null, 2), 'utf8');
                console.log(`‚úÖ ÏÑ±Í≥µ Í≤∞Í≥º Ï†ÄÏû•: ${successFile}`);
            }
            
            // Ïã§Ìå® Í≤∞Í≥º Ï†ÄÏû•
            if (this.failedBrands.length > 0) {
                const failedFile = `musinsa_email_failed_${timestamp}.json`;
                await fs.writeFile(failedFile, JSON.stringify(this.failedBrands, null, 2), 'utf8');
                console.log(`‚ùå Ïã§Ìå® Í≤∞Í≥º Ï†ÄÏû•: ${failedFile}`);
            }
            
            // Ï†ÑÏ≤¥ ÏöîÏïΩ Ï†ÄÏû•
            const totalProcessed = this.results.length + this.failedBrands.length;
            const summary = {
                processedAt: new Date().toISOString(),
                totalProcessed,
                successCount: this.results.length,
                failedCount: this.failedBrands.length,
                successRate: totalProcessed > 0 ? `${((this.results.length / totalProcessed) * 100).toFixed(1)}%` : '0%',
                results: this.results,
                failed: this.failedBrands,
                emails: this.results.map(r => ({
                    brandName: r.brandName,
                    email: r.musinsaEmail,
                    company: r.musinsaSellerInfo?.company
                }))
            };
            
            const summaryFile = `musinsa_email_summary_${timestamp}.json`;
            await fs.writeFile(summaryFile, JSON.stringify(summary, null, 2), 'utf8');
            console.log(`üìä Ï†ÑÏ≤¥ ÏöîÏïΩ Ï†ÄÏû•: ${summaryFile}`);
            
        } catch (error) {
            console.error('Í≤∞Í≥º Ï†ÄÏû• Ïã§Ìå®:', error);
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å');
        }
    }
}

// Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò - Ï†ÑÏ≤¥ Î∏åÎûúÎìú Ï≤òÎ¶¨
async function processFailedBrands(jsonFilePath) {
    const collector = new MusinsaEmailCollector();
    
    try {
        await collector.init();
        
        // Í∏∞Ï°¥ JSON ÌååÏùº Î°úÎìú
        console.log(`üìÇ JSON ÌååÏùº Î°úÎìú: ${jsonFilePath}`);
        const fileContent = await fs.readFile(jsonFilePath, 'utf8');
        const originalData = JSON.parse(fileContent);
        
        // Ïã§Ìå® Î∞è Ïä§ÌÇµÎêú Î∏åÎûúÎìú Í≤∞Ìï©
        const brandsToProcess = [
            ...(originalData.failedResults || []),
            ...(originalData.skippedResults || [])
        ];
        
        console.log(`üìã Ï≤òÎ¶¨ ÎåÄÏÉÅ:`);
        console.log(`  - Ïã§Ìå® Î∏åÎûúÎìú: ${originalData.failedResults?.length || 0}Í∞ú`);
        console.log(`  - Ïä§ÌÇµ Î∏åÎûúÎìú: ${originalData.skippedResults?.length || 0}Í∞ú`);
        console.log(`  - Ï¥ù Ï≤òÎ¶¨: ${brandsToProcess.length}Í∞ú`);
        
        if (brandsToProcess.length === 0) {
            console.log('‚ùå Ï≤òÎ¶¨Ìï† Î∏åÎûúÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        console.log(`\nüéØ Ï†ÑÏ≤¥ ${brandsToProcess.length}Í∞ú Î∏åÎûúÎìú Ï≤òÎ¶¨Î•º ÏãúÏûëÌï©ÎãàÎã§.`);
        console.log(`‚è±Ô∏è  ÏòàÏÉÅ ÏÜåÏöîÏãúÍ∞Ñ: ÏïΩ ${Math.ceil(brandsToProcess.length * 15 / 60)}Î∂Ñ`);
        
        // Ï†ÑÏ≤¥ Î∏åÎûúÎìú Ï≤òÎ¶¨ - ÏïàÏ†ïÏ†ÅÏù∏ ÏÑ§Ï†ï
        await collector.processBrands(brandsToProcess, {
            delay: 4000,      // 4Ï¥à ÏßÄÏó∞ (ÏïàÏ†ïÏÑ± Ïö∞ÏÑ†)
            batchSize: 15,    // 15Í∞úÏî© Î∞∞Ïπò Ï≤òÎ¶¨
            maxRetries: 2     // ÏµúÎåÄ 2Ìöå Ïû¨ÏãúÎèÑ
        });
        
        // Í≤∞Í≥º Ï†ÄÏû•
        await collector.saveResults();
        
        // ÏµúÏ¢Ö ÌÜµÍ≥Ñ
        console.log(`\nüìà === ÏµúÏ¢Ö ÌÜµÍ≥Ñ ===`);
        console.log(`Ï¥ù Ï≤òÎ¶¨: ${brandsToProcess.length}Í∞ú`);
        console.log(`ÏÑ±Í≥µ: ${collector.results.length}Í∞ú`);
        console.log(`Ïã§Ìå®: ${collector.failedBrands.length}Í∞ú`);
        console.log(`ÏÑ±Í≥µÎ•†: ${((collector.results.length / brandsToProcess.length) * 100).toFixed(1)}%`);
        console.log(`ÏàòÏßëÎêú Ïù¥Î©îÏùº: ${collector.results.length}Í∞ú`);
        
    } catch (error) {
        console.error('‚ùå Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò:', error);
    } finally {
        await collector.close();
    }
}

// ÌäπÏ†ï Î∏åÎûúÎìúÎßå Ï≤òÎ¶¨ÌïòÎäî Ìï®Ïàò
async function processSingleBrand(brandName, brandNameEnglish = null) {
    const collector = new MusinsaEmailCollector();
    
    try {
        await collector.init();
        
        const brand = {
            brandName,
            brandNameEnglish,
            uniqueId: `${brandName}_${brandNameEnglish || ''}`,
            category: 'manual'
        };
        
        await collector.processBrand(brand, 0, 1);
        await collector.saveResults();
        
    } catch (error) {
        console.error('‚ùå Îã®Ïùº Î∏åÎûúÎìú Ï≤òÎ¶¨ Ïò§Î•ò:', error);
    } finally {
        await collector.close();
    }
}

// ÏÇ¨Ïö© ÏòàÏãú
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
ÏÇ¨Ïö©Î≤ï:
  node musinsa_collector.js <JSONÌååÏùºÍ≤ΩÎ°ú>              # Ïã§Ìå®/Ïä§ÌÇµ Î∏åÎûúÎìú ÏùºÍ¥ÑÏ≤òÎ¶¨
  node musinsa_collector.js single <ÌïúÍ∏ÄÎ∏åÎûúÎìúÎ™Ö> [ÏòÅÏñ¥Î∏åÎûúÎìúÎ™Ö]  # Îã®Ïùº Î∏åÎûúÎìú Ï≤òÎ¶¨

ÏòàÏãú:
  node musinsa_collector.js brand_email_collection_final_1750013198088.json
  node musinsa_collector.js single "Ïù¥Ïä§Ìä∏Ìå©" "EASTPAK"

‚ö†Ô∏è  Ï£ºÏùòÏÇ¨Ìï≠:
  - Ï†ÑÏ≤¥ Ï≤òÎ¶¨Ïãú ÏïΩ 3-6ÏãúÍ∞Ñ ÏÜåÏöî ÏòàÏÉÅ
  - Ï§ëÍ∞ÑÏóê Ï§ëÎã®ÌïòÎçîÎùºÎèÑ ÏûÑÏãú ÌååÏùºÏóê Í≤∞Í≥ºÍ∞Ä Ï†ÄÏû•Îê©ÎãàÎã§
  - IP Ï∞®Îã® Î∞©ÏßÄÎ•º ÏúÑÌï¥ Ï†ÅÏ†àÌïú ÏßÄÏó∞ÏãúÍ∞ÑÏù¥ Ï†ÅÏö©Îê©ÎãàÎã§
        `);
        process.exit(1);
    }
    
    if (args[0] === 'single') {
        if (args.length < 2) {
            console.error('‚ùå Î∏åÎûúÎìúÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            process.exit(1);
        }
        processSingleBrand(args[1], args[2]).catch(console.error);
    } else {
        processFailedBrands(args[0]).catch(console.error);
    }
}

module.exports = { MusinsaEmailCollector, processFailedBrands, processSingleBrand };